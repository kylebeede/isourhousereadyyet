{"version":3,"sources":["countdown.jsx","useScreenDimensions.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Countdown","targetDate","useState","result","setResult","isPastTarget","setIsPastTarget","useEffect","setInterval","nowDate","Date","now","countdownResult","countdown","toString","confetti","ConfettiGenerator","target","max","rotate","render","clear","content","className","src","alt","id","useScreenDimensions","screenWidth","setScreenWidth","screenHeight","setScreenHeight","window","innerWidth","innerHeight","testDate","App","style","width","height","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRA4DeA,EAxDG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACTC,qBADS,mBAC9BC,EAD8B,KACtBC,EADsB,OAEGF,oBAAS,GAFZ,mBAE9BG,EAF8B,KAEhBC,EAFgB,KAIrCC,qBAAU,WACTC,aAAY,WACX,IAAMC,EAAUC,KAAKC,MAEfC,EAAkBC,IAAUJ,EAASR,GAE3CG,EAAUQ,EAAgBE,YAC1BR,EAAgBG,EAAUR,KACxB,OACD,CAACA,IAEJM,qBAAU,WACT,GAAKF,EAAL,CAIA,IAKMU,EAAW,IAAIC,IALI,CACxBC,OAAQ,kBACRC,IAAK,IACLC,QAAQ,IAKT,OAFAJ,EAASK,SAEF,kBAAML,EAASM,YACpB,CAAChB,IAEJ,IAAMiB,EAAUjB,EACf,yBAAKkB,UAAW,WACf,yBAAKA,UAAW,eAAgBC,IAAI,qBAAqBC,IAAI,QAC7D,8BAAO,UAEJ,8BAAO,SAEZ,OAAQtB,EACP,oCACC,4BAAQoB,UAAW,iBAAkBG,GAAI,oBACzC,yBAAKH,UAAW,sBACf,yBAAKA,UAAW,eACdD,GAEDjB,EAAe,KAChB,yBAAKkB,UAAW,kBACf,yBAAKA,UAAW,wBAAyB,eACzC,yBAAKA,UAAW,gBAAiBpB,MAVpB,MCzBHwB,EAfa,WAAO,IAAD,EACKzB,qBADL,mBAC1B0B,EAD0B,KACbC,EADa,OAEO3B,qBAFP,mBAE1B4B,EAF0B,KAEZC,EAFY,KASjC,OALAxB,qBAAU,WACTsB,EAAeG,OAAOC,YACtBF,EAAgBC,OAAOE,eACrB,IAEI,CACNN,cACAE,iBCNIK,G,MADa,IAAIzB,KAAK,0BACX,IAAIA,KAAK,2BAYX0B,MAVf,WAAgB,IAAD,EACyBT,IAA9BC,EADK,EACLA,YAAaE,EADR,EACQA,aAErB,OACE,yBAAKP,UAAU,YAAYc,MAAO,CAACC,MAAM,GAAD,OAAKV,EAAL,MAAsBW,OAAO,GAAD,OAAKT,EAAL,QAClE,kBAAC,EAAD,CAAW7B,WAAYkC,MCFTK,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASxB,OACP,kBAAC,IAAMyB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9514d864.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ConfettiGenerator from \"confetti-js\";\r\nimport countdown from 'countdown';\r\n\r\nconst Countdown = ({ targetDate }) => {\r\n\tconst [result, setResult] = useState();\r\n\tconst [isPastTarget, setIsPastTarget] = useState(false);\r\n\r\n\tuseEffect(function getResult() {\r\n\t\tsetInterval(function renderCountdown() {\r\n\t\t\tconst nowDate = Date.now();\r\n\r\n\t\t\tconst countdownResult = countdown(nowDate, targetDate);\r\n\r\n\t\t\tsetResult(countdownResult.toString());\r\n\t\t\tsetIsPastTarget(nowDate > targetDate);\r\n\t\t}, 1000);\r\n\t}, [targetDate]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!isPastTarget) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst confettiSettings = {\r\n\t\t\ttarget: 'confetti-canvas',\r\n\t\t\tmax: 300,\r\n\t\t\trotate: true,\r\n\t\t};\r\n\t\tconst confetti = new ConfettiGenerator(confettiSettings);\r\n\t\tconfetti.render();\r\n\r\n\t\treturn () => confetti.clear();\r\n\t}, [isPastTarget]) // add the var dependencies or not\r\n\r\n\tconst content = isPastTarget ? (\r\n\t\t<div className={'content'}>\r\n\t\t\t<img className={'contentImage'} src=\"./itshappening.gif\" alt=\"Yes\" />\r\n\t\t\t<span>{'Yes!!'}</span>\r\n\t\t</div>\r\n\t) : (<span>{'No :('}</span>);\r\n\r\n\treturn !result ? null : (\r\n\t\t<>\r\n\t\t\t<canvas className={'confettiCanvas'} id={'confetti-canvas'}></canvas>\r\n\t\t\t<div className={'countdownContainer'}>\r\n\t\t\t\t<div className={'isItDoneYet'}>\r\n\t\t\t\t\t{content}\r\n\t\t\t\t</div>\r\n\t\t\t\t{isPastTarget ? null : (\r\n\t\t\t\t<div className={'timerContainer'}>\r\n\t\t\t\t\t<div className={'timerContainerHeader'}>{'Closing in:'}</div>\r\n\t\t\t\t\t<div className={'timerContent'}>{result}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n};\r\n\r\nexport default Countdown;","import React, {useEffect, useState} from 'react';\r\n\r\nconst useScreenDimensions = () => {\r\n\tconst [screenWidth, setScreenWidth] = useState();\r\n\tconst [screenHeight, setScreenHeight] = useState();\r\n\r\n\tuseEffect(function getScreenDimensions() {\r\n\t\tsetScreenWidth(window.innerWidth);\r\n\t\tsetScreenHeight(window.innerHeight);\r\n\t}, []);\r\n\r\n\treturn {\r\n\t\tscreenWidth,\r\n\t\tscreenHeight,\r\n\t};\r\n}\r\n\r\nexport default useScreenDimensions;","import React from 'react';\nimport Countdown from './countdown';\nimport useScreenDimensions from './useScreenDimensions';\n\nimport './App.css';\n\nconst targetDate = new Date('June 29, 2020 00:00:00');\nconst testDate = new Date('June 11, 2020 14:54:00');\n\nfunction App() {\n  const { screenWidth, screenHeight } = useScreenDimensions();\n\n  return (\n    <div className=\"container\" style={{width: `${screenWidth}px`, height: `${screenHeight}px`}}>\n      <Countdown targetDate={testDate} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}